#!/usr/bin/env python3
"""
Script de teste para a API YOLO com TTS e √Åudio
Testa todos os endpoints e funcionalidades
"""

import requests
import json
import base64
import os
from PIL import Image

# Configura√ß√µes
API_BASE_URL = "http://localhost:5000"
TEST_IMAGE_PATH = "test_image.jpg"

def create_test_image():
    """Cria uma imagem de teste simples"""
    try:
        # Criar imagem simples 640x640 com cores diferentes
        img = Image.new('RGB', (640, 640), color='white')
        
        # Adicionar algumas formas b√°sicas para simular objetos
        from PIL import ImageDraw
        draw = ImageDraw.Draw(img)
        
        # Ret√¢ngulo azul (simulando um objeto)
        draw.rectangle([100, 100, 300, 400], fill='blue', outline='black')
        
        # C√≠rculo vermelho (simulando outro objeto)
        draw.ellipse([400, 200, 600, 400], fill='red', outline='black')
        
        # Salvar imagem
        img.save(TEST_IMAGE_PATH)
        print(f"‚úÖ Imagem de teste criada: {TEST_IMAGE_PATH}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar imagem de teste: {e}")
        return False

def test_health_endpoint():
    """Testa o endpoint de sa√∫de da API"""
    print("\nüè• Testando endpoint de sa√∫de...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check OK: {data['message']}")
            print(f"   Features: {', '.join(data['features'])}")
            return True
        else:
            print(f"‚ùå Health check falhou: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå N√£o foi poss√≠vel conectar √† API. Verifique se est√° rodando.")
        return False
    except Exception as e:
        print(f"‚ùå Erro no health check: {e}")
        return False

def test_info_endpoint():
    """Testa o endpoint de informa√ß√µes da API"""
    print("\n‚ÑπÔ∏è Testando endpoint de informa√ß√µes...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/info")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Info endpoint OK: {data['name']}")
            print(f"   Vers√£o: {data['version']}")
            print(f"   Modelo: {data['model']}")
            print(f"   TTS: {data['tts_language']}")
            return True
        else:
            print(f"‚ùå Info endpoint falhou: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no info endpoint: {e}")
        return False

def test_tts_endpoint():
    """Testa o endpoint TTS"""
    print("\nüîä Testando endpoint TTS...")
    
    try:
        test_text = "Ol√°! Este √© um teste da API YOLO com TTS!"
        
        payload = {
            'text': test_text,
            'play_audio': True
        }
        
        response = requests.post(f"{API_BASE_URL}/tts", json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ TTS endpoint OK: {data['message']}")
            print(f"   Texto: {data['text']}")
            print(f"   √Åudio gerado: {data['audio_info']['file_size']} bytes")
            return True
        else:
            print(f"‚ùå TTS endpoint falhou: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste TTS: {e}")
        return False

def test_detection_endpoint():
    """Testa o endpoint principal de detec√ß√£o"""
    print("\nüîç Testando endpoint de detec√ß√£o...")
    
    if not os.path.exists(TEST_IMAGE_PATH):
        print("‚ùå Imagem de teste n√£o encontrada")
        return False
    
    try:
        # Preparar arquivo para upload
        with open(TEST_IMAGE_PATH, 'rb') as f:
            files = {'image': f}
            
            response = requests.post(f"{API_BASE_URL}/detect", files=files)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Detec√ß√£o bem-sucedida!")
            print(f"   Mensagem: {data['message']}")
            print(f"   Objetos detectados: {len(data['detections'])}")
            print(f"   Resposta de texto: {data['response_text'][:100]}...")
            print(f"   Total de objetos: {data['total_objects']}")
            print(f"   √Åudio gerado: {data['audio_generated']}")
            
            return True
        else:
            print(f"‚ùå Detec√ß√£o falhou: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de detec√ß√£o: {e}")
        return False

def test_base64_endpoint():
    """Testa o endpoint de detec√ß√£o com base64"""
    print("\nüì± Testando endpoint base64...")
    
    if not os.path.exists(TEST_IMAGE_PATH):
        print("‚ùå Imagem de teste n√£o encontrada")
        return False
    
    try:
        # Converter imagem para base64
        with open(TEST_IMAGE_PATH, 'rb') as f:
            image_data = f.read()
            base64_image = base64.b64encode(image_data).decode('utf-8')
        
        # Enviar requisi√ß√£o
        payload = {'image': base64_image}
        response = requests.post(f"{API_BASE_URL}/detect-base64", json=payload)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Detec√ß√£o base64 bem-sucedida!")
            print(f"   Objetos detectados: {len(data['detections'])}")
            print(f"   √Åudio gerado: {data['audio_generated']}")
            return True
        else:
            print(f"‚ùå Detec√ß√£o base64 falhou: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste base64: {e}")
        return False

def cleanup():
    """Limpa arquivos de teste"""
    try:
        if os.path.exists(TEST_IMAGE_PATH):
            os.remove(TEST_IMAGE_PATH)
            print(f"üßπ Arquivo de teste removido: {TEST_IMAGE_PATH}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao limpar arquivo de teste: {e}")

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ Iniciando testes da API YOLO com TTS e √Åudio...")
    print("=" * 60)
    
    # Criar imagem de teste
    if not create_test_image():
        print("‚ùå Falha ao criar imagem de teste. Abortando testes.")
        return
    
    try:
        # Testar endpoints
        tests_passed = 0
        total_tests = 5
        
        if test_health_endpoint():
            tests_passed += 1
        
        if test_info_endpoint():
            tests_passed += 1
        
        if test_tts_endpoint():
            tests_passed += 1
        
        if test_detection_endpoint():
            tests_passed += 1
        
        if test_base64_endpoint():
            tests_passed += 1
        
        # Resumo dos testes
        print("\n" + "=" * 60)
        print(f"üìä RESULTADO DOS TESTES: {tests_passed}/{total_tests} passaram")
        
        if tests_passed == total_tests:
            print("üéâ Todos os testes passaram! API est√° funcionando perfeitamente.")
            print("üîä TTS e reprodu√ß√£o de √°udio funcionando!")
        else:
            print("‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Testes interrompidos pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado durante os testes: {e}")
    finally:
        # Limpeza
        cleanup()
        print("\n‚ú® Testes conclu√≠dos!")

if __name__ == "__main__":
    main()
